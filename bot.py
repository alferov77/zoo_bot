import logging
import urllib.parse
import sqlite3  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º sqlite3
import os
from dotenv import load_dotenv
from collections import Counter
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_USERNAME = 'MZooQuizBot'
BOT_LINK = f'https://t.me/{BOT_USERNAME}'

STAFF_CHAT_ID = 1846976346

questions = [
    "1Ô∏è‚É£ –ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
    "2Ô∏è‚É£ –ö–∞–∫–∞—è –≤–∞—à–∞ –ª—é–±–∏–º–∞—è –µ–¥–∞?",
    "3Ô∏è‚É£ –ö–∞–∫–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –∂–∏–∑–Ω–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
    "4Ô∏è‚É£ –ö–∞–∫ –±—ã –≤–∞—Å –æ–ø–∏—Å–∞–ª–∏ –¥—Ä—É–∑—å—è?",
    "5Ô∏è‚É£ –ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö?",
    "6Ô∏è‚É£ –ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Å–µ–∑–æ–Ω?",
    "7Ô∏è‚É£ –ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ä–∏—Å–∫—É?",
    "8Ô∏è‚É£ –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –º—É–∑—ã–∫–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è?",
    "9Ô∏è‚É£ –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?",
    "üîü –ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º?"
]

options = [
    ["A) –ê–∫—Ç–∏–≤–Ω–æ, –∑–∞–Ω–∏–º–∞—è—Å—å —Å–ø–æ—Ä—Ç–æ–º", "B) –ß–∏—Ç–∞—è –∫–Ω–∏–≥–∏ –∏ –∏–∑—É—á–∞—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ", "C) –û–±—â–∞—è—Å—å —Å –¥—Ä—É–∑—å—è–º–∏", "D) –û—Ç–¥—ã—Ö–∞—è –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ"],
    ["A) –§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏", "B) –ú—è—Å–æ", "C) –†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã", "D) –û—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ–Ω–∞"],
    ["A) –õ–µ—Å", "B) –ì–æ—Ä—ã", "C) –°–∞–≤–∞–Ω–Ω–∞", "D) –ü—É—Å—Ç—ã–Ω—è"],
    ["A) –ú—É–¥—Ä—ã–π –∏ —Å–ø–æ–∫–æ–π–Ω—ã–π", "B) –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ —Å–º–µ–ª—ã–π", "C) –û–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "D) –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∏ –∑–∞–¥—É–º—á–∏–≤—ã–π"],
    ["A) –ü—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å", "B) –ü–æ—Å–µ—â–∞—Ç—å –º—É–∑–µ–∏ –∏ –≤—ã—Å—Ç–∞–≤–∫–∏", "C) –í—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏", "D) –ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Ö–æ–±–±–∏ –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ"],
    ["A) –í–µ—Å–Ω–∞", "B) –õ–µ—Ç–æ", "C) –û—Å–µ–Ω—å", "D) –ó–∏–º–∞"],
    ["A) –õ—é–±–ª—é —Ä–∏—Å–∫–æ–≤–∞—Ç—å", "B) –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "C) –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏", "D) –ò–∑–±–µ–≥–∞—é —Ä–∏—Å–∫–∞"],
    ["A) –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", "B) –†–æ–∫", "C) –ü–æ–ø-–º—É–∑—ã–∫–∞", "D) –î–∂–∞–∑"],
    ["A) –°–µ–º—å—è", "B) –ö–∞—Ä—å–µ—Ä–∞", "C) –î—Ä—É–∑—å—è", "D) –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ"],
    ["A) –ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º", "B) –†–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é —Å –±–ª–∏–∑–∫–∏–º–∏", "C) –ú–µ–¥–∏—Ç–∏—Ä—É—é", "D) –°–ª—É—à–∞—é –º—É–∑—ã–∫—É"]
]

animals = {
    'A': '–°–ª–æ–Ω',
    'B': '–õ–µ–≤',
    'C': '–°—É—Ä–∏–∫–∞—Ç',
    'D': '–§–ª–∞–º–∏–Ω–≥–æ'
}

animal_links = {
    '–°–ª–æ–Ω': 'https://moscowzoo.ru/animals/kinds/afrikanskiy_slon',
    '–õ–µ–≤': 'https://moscowzoo.ru/animals/kinds/indiyskiy_–ª–µ–≤',
    '–°—É—Ä–∏–∫–∞—Ç': 'https://moscowzoo.ru/animals/kinds/surikat',
    '–§–ª–∞–º–∏–Ω–≥–æ': 'https://moscowzoo.ru/animals/kinds/rozovyy_flamingo'
}

animal_images = {
    '–°–ª–æ–Ω': 'images/elephant.jpg',
    '–õ–µ–≤': 'images/lion.jpg',
    '–°—É—Ä–∏–∫–∞—Ç': 'images/meerkat.jpg',
    '–§–ª–∞–º–∏–Ω–≥–æ': 'images/flamingo.jpg'
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
FEEDBACK = 1
CONTACT = 2

def init_db():
    try:
        conn = sqlite3.connect('feedback.db')  # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS feedback (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT NOT NULL,
                username TEXT,
                user_id INTEGER,
                feedback_text TEXT
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def generate_twitter_share(animal, link):
    share_text = f"–Ø –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞, –∏ –º–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {animal}! –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ: {link}"
    return f"https://twitter.com/intent/tweet?text={urllib.parse.quote(share_text)}"

def generate_facebook_share(animal, link):
    share_url = BOT_LINK
    return f"https://www.facebook.com/sharer/sharer.php?u={urllib.parse.quote(share_url)}"

async def send_final_buttons(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    final_buttons = [
        [
            InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑", callback_data='restart'),
            InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='feedback'),
            InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data='contact')
        ]
    ]
    final_reply_markup = InlineKeyboardMarkup(final_buttons)
    
    try:
        final_message = await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=final_reply_markup
        )
        context.user_data['final_message_id'] = final_message.message_id
        logger.debug(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å message_id={final_message.message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üêæ\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞!\n\n"
        "–ú—ã —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ—Ç–∑—ã–≤—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n"
        "–î–∞–≤–∞–π—Ç–µ —É–∑–Ω–∞–µ–º, –∫–∞–∫–æ–µ —É –≤–∞—Å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤."
    )
    context.user_data['answers'] = []
    context.user_data['current_question'] = 0
    await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_num = context.user_data['current_question']
    if q_num < len(questions):
        question = questions[q_num]
        options_list = options[q_num]
        buttons = [
            [InlineKeyboardButton(option, callback_data=option[0].upper())] for option in options_list
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        if q_num == 0 and update.message:
            await update.message.reply_text(question, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(question, reply_markup=reply_markup)
    else:
        await show_result(update, context)


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    answer = query.data
    context.user_data['answers'].append(answer)
    context.user_data['current_question'] += 1
    await send_question(update, context)

async def show_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    answers = context.user_data['answers']
    count = Counter(answers)
    result = count.most_common(1)[0][0]  # –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–π—Å—è –æ—Ç–≤–µ—Ç
    animal = animals.get(result, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ')
    link = animal_links.get(animal, 'https://moscowzoo.ru/')
    image_path = animal_images.get(animal)

    chat_id = update.effective_chat.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    context.user_data['animal'] = animal
    context.user_data['animal_link'] = link

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_id
    try:
        with open(image_path, 'rb') as photo:
            photo_message = await context.bot.send_photo(chat_id=chat_id, photo=photo)
            context.user_data['photo_message_id'] = photo_message.message_id
            logger.debug(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å message_id={photo_message.message_id} –≤ chat_id={photo_message.chat.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–£–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º"
    animal_message_text = f"–í–∞—à–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {animal}! üéâ"
    animal_button = InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º", url=link)
    animal_reply_markup = InlineKeyboardMarkup([[animal_button]])

    try:
        animal_message = await context.bot.send_message(
            chat_id=chat_id,
            text=animal_message_text,
            reply_markup=animal_reply_markup
        )
        context.user_data['animal_message_id'] = animal_message.message_id
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∏–≤–æ—Ç–Ω—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å message_id={animal_message.message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∂–∏–≤–æ—Ç–Ω—ã–º: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
    twitter_share_url = generate_twitter_share(animal, link)
    facebook_share_url = generate_facebook_share(animal, link)
    instagram_share_url = "https://www.instagram.com/"  # Instagram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º–æ–π —à–∞—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ URL

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
    share_buttons = [
        InlineKeyboardButton("Facebook", url=facebook_share_url),
        InlineKeyboardButton("Twitter (X)", url=twitter_share_url),
        InlineKeyboardButton("Instagram", url=instagram_share_url)
    ]
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫, –µ—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É
    share_reply_markup = InlineKeyboardMarkup([share_buttons])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
    try:
        share_message = await context.bot.send_message(
            chat_id=chat_id,
            text="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º:",
            reply_markup=share_reply_markup
        )
        context.user_data['share_message_id'] = share_message.message_id
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å message_id={share_message.message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞.")

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –∏ –∫–Ω–æ–ø–∫–æ–π
    program_message_text = (
        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ '–í–æ–∑—å–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É' ('–ö–ª—É–± –¥—Ä—É–∑–µ–π').\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º –∏ –ø–æ–º–æ—á—å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø–ª–∞–Ω–µ—Ç—ã."
    )
    program_button = InlineKeyboardButton(
        "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –±–æ–ª—å—à–µ?",
        url="https://moscowzoo.ru/about/guardianship"
    )
    program_reply_markup = InlineKeyboardMarkup([[program_button]])

    try:
        program_message = await context.bot.send_message(
            chat_id=chat_id,
            text=program_message_text,
            reply_markup=program_reply_markup
        )
        context.user_data['program_message_id'] = program_message.message_id
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å message_id={program_message.message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    await send_final_buttons(chat_id, context)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è final_message_id)
    context.user_data['result_message_ids'] = [
        animal_message.message_id,
        share_message.message_id,
        program_message.message_id
    ]


async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if 'photo_message_id' in context.user_data:
        photo_message_id = context.user_data['photo_message_id']
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ —Å message_id={photo_message_id}")
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=photo_message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        else:
            del context.user_data['photo_message_id']

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–∏—Å–∫–ª—é—á–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if 'result_message_ids' in context.user_data:
        for message_id in context.user_data['result_message_ids']:
            logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å message_id={message_id}")
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å message_id={message_id}: {e}")
        del context.user_data['result_message_ids']

    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    context.user_data['answers'] = []
    context.user_data['current_question'] = 0
    await send_question(update, context)


async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )
    return FEEDBACK  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞

async def save_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    feedback_text = update.message.text
    user = update.message.from_user
    username = user.username if user.username else user.first_name
    timestamp = update.message.date.strftime('%Y-%m-%d %H:%M:%S')
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect('feedback.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO feedback (timestamp, username, user_id, feedback_text)
            VALUES (?, ?, ?, ?)
        ''', (timestamp, username, user.id, feedback_text))
        conn.commit()
        conn.close()
        logger.debug(f"–û—Ç–∑—ã–≤ –æ—Ç {username} (ID: {user.id}) —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞.")
        return ConversationHandler.END
    
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    await send_final_buttons(update.effective_chat.id, context)
    
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä


async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."
    )
    return CONTACT  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def receive_contact_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user = update.message.from_user
    animal = context.user_data.get('animal', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ')
    animal_link = context.user_data.get('animal_link', 'https://moscowzoo.ru/')
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    staff_message = (
        f"üì¢ **–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n"
        f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name} (@{user.username})\n"
        f"**–¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:** {animal}\n"
        f"**–£–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º:** {animal_link}\n\n"
        f"**–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n{user_message}"
    )
    
    try:
        await context.bot.send_message(
            chat_id=STAFF_CHAT_ID,
            text=staff_message,
            parse_mode='Markdown'
        )
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {e}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    await send_final_buttons(update.effective_chat.id, context)
    
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")

def main():
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(handle_answer, pattern='^[ABCD]$'))
    application.add_handler(CallbackQueryHandler(restart, pattern='^restart$'))
    application.add_handler(CallbackQueryHandler(contact, pattern='^contact$'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" —á–µ—Ä–µ–∑ ConversationHandler
    feedback_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(feedback, pattern='^feedback$')],
        states={
            FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_feedback)]
        },
        fallbacks=[CommandHandler('start', start)],
    )
    application.add_handler(feedback_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏" —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π ConversationHandler
    contact_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(contact, pattern='^contact$')],
        states={
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_contact_message)]
        },
        fallbacks=[CommandHandler('start', start)],
    )
    application.add_handler(contact_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.COMMAND, unknown))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()